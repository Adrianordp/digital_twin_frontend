/* tslint:disable */
/* eslint-disable */
/**
 * Dual-System Digital Twin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  HistoryResponse,
  LogsResponse,
  ResetRequest,
  SessionInitRequest,
  SessionInitResponse,
  StateResponse,
  StepRequest,
  UpdateParamsRequest,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    HistoryResponseFromJSON,
    HistoryResponseToJSON,
    LogsResponseFromJSON,
    LogsResponseToJSON,
    ResetRequestFromJSON,
    ResetRequestToJSON,
    SessionInitRequestFromJSON,
    SessionInitRequestToJSON,
    SessionInitResponseFromJSON,
    SessionInitResponseToJSON,
    StateResponseFromJSON,
    StateResponseToJSON,
    StepRequestFromJSON,
    StepRequestToJSON,
    UpdateParamsRequestFromJSON,
    UpdateParamsRequestToJSON,
} from '../models/index';

export interface GetHistorySimulateHistorySessionIdGetRequest {
    sessionId: string;
}

export interface GetLogsSimulateLogsSessionIdGetRequest {
    sessionId: string;
}

export interface GetStateSimulateStateSessionIdGetRequest {
    sessionId: string;
}

export interface InitSimulationSimulateInitPostRequest {
    sessionInitRequest: SessionInitRequest;
}

export interface ResetSimulationSimulateResetPostRequest {
    resetRequest: ResetRequest;
}

export interface StepSimulationSimulateStepPostRequest {
    stepRequest: StepRequest;
}

export interface UpdateParamsSimulateParamsPatchRequest {
    updateParamsRequest: UpdateParamsRequest;
}

/**
 * SimulationApi - interface
 * 
 * @export
 * @interface SimulationApiInterface
 */
export interface SimulationApiInterface {
    /**
     * Get the history of a simulation session.
     * @summary Get History
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApiInterface
     */
    getHistorySimulateHistorySessionIdGetRaw(requestParameters: GetHistorySimulateHistorySessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HistoryResponse>>;

    /**
     * Get the history of a simulation session.
     * Get History
     */
    getHistorySimulateHistorySessionIdGet(requestParameters: GetHistorySimulateHistorySessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HistoryResponse>;

    /**
     * Get the logs of a simulation session.
     * @summary Get Logs
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApiInterface
     */
    getLogsSimulateLogsSessionIdGetRaw(requestParameters: GetLogsSimulateLogsSessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogsResponse>>;

    /**
     * Get the logs of a simulation session.
     * Get Logs
     */
    getLogsSimulateLogsSessionIdGet(requestParameters: GetLogsSimulateLogsSessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogsResponse>;

    /**
     * Get the current state of a simulation session.
     * @summary Get State
     * @param {string} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApiInterface
     */
    getStateSimulateStateSessionIdGetRaw(requestParameters: GetStateSimulateStateSessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateResponse>>;

    /**
     * Get the current state of a simulation session.
     * Get State
     */
    getStateSimulateStateSessionIdGet(requestParameters: GetStateSimulateStateSessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateResponse>;

    /**
     * Initialize a new simulation session.
     * @summary Init Simulation
     * @param {SessionInitRequest} sessionInitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApiInterface
     */
    initSimulationSimulateInitPostRaw(requestParameters: InitSimulationSimulateInitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionInitResponse>>;

    /**
     * Initialize a new simulation session.
     * Init Simulation
     */
    initSimulationSimulateInitPost(requestParameters: InitSimulationSimulateInitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionInitResponse>;

    /**
     * Reset a simulation session, optionally with new parameters.
     * @summary Reset Simulation
     * @param {ResetRequest} resetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApiInterface
     */
    resetSimulationSimulateResetPostRaw(requestParameters: ResetSimulationSimulateResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateResponse>>;

    /**
     * Reset a simulation session, optionally with new parameters.
     * Reset Simulation
     */
    resetSimulationSimulateResetPost(requestParameters: ResetSimulationSimulateResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateResponse>;

    /**
     * Advance the simulation by one step and return the new state.
     * @summary Step Simulation
     * @param {StepRequest} stepRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApiInterface
     */
    stepSimulationSimulateStepPostRaw(requestParameters: StepSimulationSimulateStepPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateResponse>>;

    /**
     * Advance the simulation by one step and return the new state.
     * Step Simulation
     */
    stepSimulationSimulateStepPost(requestParameters: StepSimulationSimulateStepPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateResponse>;

    /**
     * Update model parameters for a simulation session.
     * @summary Update Params
     * @param {UpdateParamsRequest} updateParamsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimulationApiInterface
     */
    updateParamsSimulateParamsPatchRaw(requestParameters: UpdateParamsSimulateParamsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateResponse>>;

    /**
     * Update model parameters for a simulation session.
     * Update Params
     */
    updateParamsSimulateParamsPatch(requestParameters: UpdateParamsSimulateParamsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateResponse>;

}

/**
 * 
 */
export class SimulationApi extends runtime.BaseAPI implements SimulationApiInterface {

    /**
     * Get the history of a simulation session.
     * Get History
     */
    async getHistorySimulateHistorySessionIdGetRaw(requestParameters: GetHistorySimulateHistorySessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HistoryResponse>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling getHistorySimulateHistorySessionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/simulate/history/{session_id}`;
        urlPath = urlPath.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters['sessionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HistoryResponseFromJSON(jsonValue));
    }

    /**
     * Get the history of a simulation session.
     * Get History
     */
    async getHistorySimulateHistorySessionIdGet(requestParameters: GetHistorySimulateHistorySessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HistoryResponse> {
        const response = await this.getHistorySimulateHistorySessionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the logs of a simulation session.
     * Get Logs
     */
    async getLogsSimulateLogsSessionIdGetRaw(requestParameters: GetLogsSimulateLogsSessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogsResponse>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling getLogsSimulateLogsSessionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/simulate/logs/{session_id}`;
        urlPath = urlPath.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters['sessionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogsResponseFromJSON(jsonValue));
    }

    /**
     * Get the logs of a simulation session.
     * Get Logs
     */
    async getLogsSimulateLogsSessionIdGet(requestParameters: GetLogsSimulateLogsSessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogsResponse> {
        const response = await this.getLogsSimulateLogsSessionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current state of a simulation session.
     * Get State
     */
    async getStateSimulateStateSessionIdGetRaw(requestParameters: GetStateSimulateStateSessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateResponse>> {
        if (requestParameters['sessionId'] == null) {
            throw new runtime.RequiredError(
                'sessionId',
                'Required parameter "sessionId" was null or undefined when calling getStateSimulateStateSessionIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/simulate/state/{session_id}`;
        urlPath = urlPath.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters['sessionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateResponseFromJSON(jsonValue));
    }

    /**
     * Get the current state of a simulation session.
     * Get State
     */
    async getStateSimulateStateSessionIdGet(requestParameters: GetStateSimulateStateSessionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateResponse> {
        const response = await this.getStateSimulateStateSessionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initialize a new simulation session.
     * Init Simulation
     */
    async initSimulationSimulateInitPostRaw(requestParameters: InitSimulationSimulateInitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SessionInitResponse>> {
        if (requestParameters['sessionInitRequest'] == null) {
            throw new runtime.RequiredError(
                'sessionInitRequest',
                'Required parameter "sessionInitRequest" was null or undefined when calling initSimulationSimulateInitPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/simulate/init`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SessionInitRequestToJSON(requestParameters['sessionInitRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionInitResponseFromJSON(jsonValue));
    }

    /**
     * Initialize a new simulation session.
     * Init Simulation
     */
    async initSimulationSimulateInitPost(requestParameters: InitSimulationSimulateInitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionInitResponse> {
        const response = await this.initSimulationSimulateInitPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset a simulation session, optionally with new parameters.
     * Reset Simulation
     */
    async resetSimulationSimulateResetPostRaw(requestParameters: ResetSimulationSimulateResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateResponse>> {
        if (requestParameters['resetRequest'] == null) {
            throw new runtime.RequiredError(
                'resetRequest',
                'Required parameter "resetRequest" was null or undefined when calling resetSimulationSimulateResetPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/simulate/reset`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetRequestToJSON(requestParameters['resetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateResponseFromJSON(jsonValue));
    }

    /**
     * Reset a simulation session, optionally with new parameters.
     * Reset Simulation
     */
    async resetSimulationSimulateResetPost(requestParameters: ResetSimulationSimulateResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateResponse> {
        const response = await this.resetSimulationSimulateResetPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Advance the simulation by one step and return the new state.
     * Step Simulation
     */
    async stepSimulationSimulateStepPostRaw(requestParameters: StepSimulationSimulateStepPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateResponse>> {
        if (requestParameters['stepRequest'] == null) {
            throw new runtime.RequiredError(
                'stepRequest',
                'Required parameter "stepRequest" was null or undefined when calling stepSimulationSimulateStepPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/simulate/step`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StepRequestToJSON(requestParameters['stepRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateResponseFromJSON(jsonValue));
    }

    /**
     * Advance the simulation by one step and return the new state.
     * Step Simulation
     */
    async stepSimulationSimulateStepPost(requestParameters: StepSimulationSimulateStepPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateResponse> {
        const response = await this.stepSimulationSimulateStepPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update model parameters for a simulation session.
     * Update Params
     */
    async updateParamsSimulateParamsPatchRaw(requestParameters: UpdateParamsSimulateParamsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateResponse>> {
        if (requestParameters['updateParamsRequest'] == null) {
            throw new runtime.RequiredError(
                'updateParamsRequest',
                'Required parameter "updateParamsRequest" was null or undefined when calling updateParamsSimulateParamsPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/simulate/params`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateParamsRequestToJSON(requestParameters['updateParamsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateResponseFromJSON(jsonValue));
    }

    /**
     * Update model parameters for a simulation session.
     * Update Params
     */
    async updateParamsSimulateParamsPatch(requestParameters: UpdateParamsSimulateParamsPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateResponse> {
        const response = await this.updateParamsSimulateParamsPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
